var searchData=
[
  ['describe',['describe',['../public_2tests_2projects_8spec_8js.html#a14542369184da87e696791f2f542d9f6',1,'describe(&apos;MEAN controllers&apos;, function(){describe(&apos;ProjectsController&apos;, function(){beforeEach(function(){jasmine.addMatchers({toEqualData:function(){return{compare:function(actual, expected){return{pass:angular.equals(actual, expected)};}};}});});beforeEach(function(){module(&apos;mean&apos;);module(&apos;mean.system&apos;);module(&apos;mean.projects&apos;);module(&apos;authMock&apos;);});var ProjectsController, scope, $httpBackend, $stateParams, $location, MeanUser;beforeEach(inject(function($controller, $rootScope, _ $location_, _ $stateParams_, _ $httpBackend_, _MeanUser_){MeanUser=_MeanUser_;scope=$rootScope.$new();ProjectsController=$controller(&apos;ProjectsController&apos;,{$scope:scope, MeanUser:MeanUser});$stateParams=_ $stateParams_;$httpBackend=_ $httpBackend_;$location=_ $location_;}));it(&apos;$scope.find() should create an array with at least one project object &apos;+ &apos;fetched from XHR&apos;, function(){MeanUser.login();$httpBackend.expectGET(&apos;api\/projects&apos;).respond([{title: &apos;Human rights&apos;}]);scope.find();$httpBackend.flush();expect(scope.projects).toEqualData([{&quot;title&quot;:&quot;Human rights&quot;}]);});it(&apos;$scope.findOne() should create an array with one project object fetched &apos;+ &apos;from XHR using a projectId URL parameter&apos;, function(){$stateParams.projectId= &apos;525a8422f6d0f87f0e407a33&apos;;var testProjectData=function(){return{title: &apos;Human rights&apos;};};$httpBackend.expectGET(/api\/projects\/([0-9a-fA-F]{24})$/).respond(testProjectData());scope.findOne();$httpBackend.flush();expect(scope.project).toEqualData(testProjectData());});});}):&#160;projects.spec.js'],['../server_2tests_2projects_8spec_8js.html#a755c9b88c447ccdb922884a1feced8e4',1,'describe(&apos;&lt; Unit Test &gt;&apos;, function(){describe(&apos;Model Project:&apos;, function(){beforeEach(function(done){this.timeout(10000);organisation=new Organisation({&quot;name&quot;:&quot;Humanrights org&quot;,&quot;representative&quot;:&quot;Representative&quot;,&quot;address&quot;:&quot;Adress 123&quot;,&quot;tel&quot;:&quot;123445&quot;,&quot;email&quot;:&quot;email@org.com&quot;,&quot;website&quot;:&quot;www.org.com&quot;,&quot;legal_status&quot;:&quot;legal status&quot;,&quot;history_status&quot;:&quot;history status&quot;,&quot;int_links&quot;:&quot;international links&quot;,&quot;bank_account&quot;:bank_account});bank_account=new BankAccount({&quot;bank_contact_details&quot;:&quot;Branch, address&quot;,&quot;iban&quot;:&quot;abcdefg1234&quot;,&quot;swift&quot;:&quot;OKOYFI&quot;,&quot;holder_name&quot;:&quot;John Smith&quot;});project1=new Project({&quot;title&quot;:&quot;Human rights&quot;,&quot;coordinator&quot;:&quot;Keijo Koordinaattori&quot;,&quot;organisation&quot;:organisation,&quot;status&quot;:&quot;approved&quot;,&quot;reg_date&quot;:&quot;12.10.2014&quot;,&quot;funding&quot;:{&quot;applied_curr_local&quot;:&quot;50 000&quot;,&quot;applied_curr_eur&quot;:&quot;10 000&quot;,&quot;granted_curr_local&quot;:&quot;50 000&quot;,&quot;granted_curr_eur&quot;:&quot;10 000&quot;},&quot;duration_months&quot;:30,&quot;description&quot;:&quot;A short description of project&quot;,&quot;description_en&quot;:&quot;Description in english&quot;,&quot;background&quot;:&quot;Project background&quot;,&quot;beneficiaries&quot;:&quot;The project benefits...&quot;,&quot;gender_aspect&quot;:&quot;Gender aspects include...&quot;,&quot;project_goal&quot;:&quot;Project goal is...&quot;,&quot;sustainability_risks&quot;:&quot;Some data here&quot;,&quot;reporting_evaluation&quot;:&quot;Data&quot;,&quot;other_donors_proposed&quot;:&quot;Donated amount&quot;,&quot;dac&quot;:&quot;abcd123&quot;});project1.save();project2=new Project({&quot;title&quot;:&quot;Humans&quot;,&quot;coordinator&quot;:&quot;Keijo Koordi&quot;,&quot;organisation&quot;:organisation,&quot;status&quot;:&quot;approved&quot;,&quot;reg_date&quot;:&quot;12.9.2014&quot;,&quot;funding&quot;:{&quot;applied_curr_local&quot;:&quot;50 000&quot;,&quot;applied_curr_eur&quot;:&quot;11 000&quot;,&quot;granted_curr_local&quot;:&quot;50 000&quot;,&quot;granted_curr_eur&quot;:&quot;11 000&quot;},&quot;duration_months&quot;:12,&quot;description&quot;:&quot;A short description of project&quot;,&quot;description_en&quot;:&quot;Description in english&quot;,&quot;background&quot;:&quot;Project background 2&quot;,&quot;beneficiaries&quot;:&quot;The project benefits such and such&quot;,&quot;gender_aspect&quot;:&quot;Gender aspects include this and that&quot;,&quot;project_goal&quot;:&quot;Project goal is...&quot;,&quot;sustainability_risks&quot;:&quot;Some data here&quot;,&quot;reporting_evaluation&quot;:&quot;More data&quot;,&quot;other_donors_proposed&quot;:&quot;Donated amount&quot;,&quot;dac&quot;:&quot;abcd123&quot;});project2.save();done();});describe(&apos;Method All&apos;, function(){it(&apos;should list all projects&apos;, function(done){this.timeout(10000);var query=Projectreturn query.find(function(err, data){expect(err).to.be(null);expect(data.length).to.be(2);done();});});});describe(&apos;Method Show&apos;, function(){it(&apos;should find given project&apos;, function(done){this.timeout(10000);var query=Project;return query.findOne({title: &apos;Humans&apos;}).exec(function(err, data){expect(err).to.be(null);expect(data.title).to.be(&quot;Humans&quot;);done();});});});describe(&apos;Method Save&apos;, function(){beforeEach(function(done){project3=new Project({&quot;title&quot;:&quot;Children rights&quot;,&quot;coordinator&quot;:&quot;Kaija Koordi&quot;,&quot;organisation&quot;:organisation,&quot;status&quot;:&quot;registered&quot;,&quot;funding&quot;:{&quot;applied_curr_local&quot;:&quot;50 000&quot;,&quot;applied_curr_eur&quot;:&quot;11 000&quot;,&quot;granted_curr_local&quot;:&quot;50 000&quot;,&quot;granted_curr_eur&quot;:&quot;11 000&quot;},&quot;duration_months&quot;:19,&quot;description&quot;:&quot;A short description of project&quot;,&quot;description_en&quot;:&quot;Description in english&quot;,&quot;background&quot;:&quot;Project background 3&quot;,&quot;beneficiaries&quot;:&quot;The project benefits such and such&quot;,&quot;gender_aspect&quot;:&quot;Gender aspects include this and that&quot;,&quot;project_goal&quot;:&quot;Project goal is...&quot;,&quot;sustainability_risks&quot;:&quot;Some data here&quot;,&quot;reporting_evaluation&quot;:&quot;More data&quot;,&quot;other_donors_proposed&quot;:&quot;Donated amount&quot;,&quot;dac&quot;:&quot;19191123&quot;});done();});it(&apos;should be able to save project without problems&apos;, function(done){this.timeout(10000);return project3.save(function(err, data){expect(err).to.be(null);expect(data.title).to.equal(&apos;Children rights&apos;);expect(data.coordinator).to.equal(&apos;Kaija Koordi&apos;);expect(data.organisation.length).to.not.equal(0);expect(data.reg_date.length).to.not.equal(0);project3.remove();done();});});it(&apos;should show an error when try to save without a title&apos;, function(done){this.timeout(10000);project3.title= &apos;&apos;;return project3.save(function(err){expect(err).to.not.be(null);project3.remove();done();});});});afterEach(function(done){this.timeout(10000);project1.remove();project2.remove();done();});});}):&#160;projects.spec.js']]]
];
